[versions]
compileSDK = "34"
minSDK = "26"
targetSDK = "33"

activity = "1.8.2"
androidDesugarLibs = "2.0.4"
androidXJunit = "1.1.5"
androidXTest = "1.5.2"
appcompat = "1.6.1"
coreKtx = "1.12.0"
detekt = "1.23.5"
gradle = "8.3.0"
hilt = "2.51"
hiltNavigationCompose = "1.2.0"
javaxInject = "1"
jetpackComposeBom = "2024.02.01"
junit = "4.13.2"
kotlin = "1.9.22"
kotlinxCoroutines = "1.8.0"
kotlinxDateTime = "0.5.0"
kotlinxKover = "0.7.6"
kotlinxSerialization = "1.6.3"
ksp = "1.9.22-1.0.17"
ktor = "2.3.8"
lifecycle = "2.7.0"
mavericks = "3.0.9"
mockWebServer = "4.12.0"
navigation = "2.7.7"
okhttpProfiler = "1.0.8"
retrofit = "2.9.0"
room = "2.6.1"
truth = "1.4.2"

[libraries]

# Allow overriding application in instrumented tests
androidx-test-runner = { module = "androidx.test:runner", version.ref = "androidXTest" }

androidx-test-ext-junit = { module = "androidx.test.ext:junit", version.ref = "androidXJunit" }

appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }

# De-sugar Java 8 APIs
android-desugar-libs = { module = "com.android.tools:desugar_jdk_libs", version.ref = "androidDesugarLibs" }

# Compose integration with activities
activity-compose = { module = "androidx.activity:activity-compose", version.ref = "activity" }
compose-ui-core = { module = "androidx.compose.ui:ui" }

# Tooling support (Previews, etc.)
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling" }

compose-bom = { module = "androidx.compose:compose-bom", version.ref = "jetpackComposeBom" }

# Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
compose-foundation = { module = "androidx.compose.foundation:foundation" }

# Material Design
compose-material-core = { module = "androidx.compose.material3:material3" }

# Material design icons
compose-material-icons-core = { module = "androidx.compose.material:material-icons-core" }
compose-material-icons-extened = { module = "androidx.compose.material:material-icons-extended" }

# Integration with ViewModels
lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
lifecycle-viewmodel-ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }

# Integration with observables
compose-runtime-livedata = { module = "androidx.compose.runtime:runtime-livedata" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview" }

compose-ui-test-junit = { module = "androidx.compose.ui:ui-test-junit4" }
compose-ui-test-manifest = { module = "androidx.compose.ui:ui-test-manifest" }

core-ktx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }

# Dependency Injection
dagger = { module = "com.google.dagger:dagger", version.ref = "hilt" }
hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hilt" }
hilt-android-testing = { module = "com.google.dagger:hilt-android-testing", version.ref = "hilt" }
hilt-android-gradle-plugin = { module = "com.google.dagger:hilt-android-gradle-plugin", version.ref = "hilt" }
hilt-compiler = { module = "com.google.dagger:hilt-compiler", version.ref = "hilt" }
hilt-navigation-compose = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "hiltNavigationCompose" }
javax-inject = { module = "javax.inject:javax.inject", version.ref = "javaxInject" }

gradle = { module = "com.android.tools.build:gradle", version.ref = "gradle" }

# Testing
junit = { module = "junit:junit", version.ref = "junit" }

kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }

# Date / Time
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDateTime" }

# Testing Kotlin Coroutines
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinxCoroutines" }

# Serialization
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }

# API Client
ktor-contentNegociation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-resources = { module = "io.ktor:ktor-client-resources", version.ref = "ktor" }
ktor-serialization-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-testing = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }

# MVI
mavericks-compose = { module = "com.airbnb.android:mavericks-compose", version.ref = "mavericks" }
mavericks-core = { module = "com.airbnb.android:mavericks", version.ref = "mavericks" }

# Mocking HTTP Responses
mockWebServer = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "mockWebServer" }

# Navigation
navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "navigation" }
navigation-testing = { module = "androidx.navigation:navigation-testing", version.ref = "navigation" }

okhttp-profiler = { module = "com.localebro:okhttpprofiler", version.ref = "okhttpProfiler" }

# REST Client
retrofit-core = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-gson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofit" }

# Persistence
room-compiler = { module = "androidx.room:room-compiler", version.ref = "room" }
room-ktx = { module = "androidx.room:room-ktx", version.ref = "room" }
room-testing = { module = "androidx.room:room-testing", version.ref = "room" }

# Improved Test Assertions
truth = { module = "com.google.truth:truth", version.ref = "truth" }

[bundles]
compose = [
    "activity-compose",
    "compose-foundation",
    "compose-material-core",
    "compose-material-icons-core",
    "compose-material-icons-extened",
    "compose-runtime-livedata",
    "compose-ui-core",
    "compose-ui-tooling",
    "compose-ui-tooling-preview",
]
lifecycle = [
    "lifecycle-runtime-ktx",
    "lifecycle-viewmodel-compose",
    "lifecycle-viewmodel-ktx",
]
retrofit = [
    "retrofit-core",
    "retrofit-gson",
]

[plugins]
androidApplication = { id = "com.android.application", version.ref = "gradle" }
androidLibrary = { id = "com.android.library", version.ref = "gradle" }

# A static code analyzer for Kotlin
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }

kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinxSerialization = { id = "org.jetbrains.kotlin.serialization", version.ref = "kotlin" }

# Code Coverage
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kotlinxKover" }


ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
