@startuml
!include C4_Component.puml
!include common.puml

title Now in Android

Layer(ui, "UI") {
    Component(bookmarkRoute, "BookmarkRoute", "AndroidX Navigation")
    Component(bookmarkScreen, "BookmarkScreen", "Jetpack Compose")
    Component(bookmarkViewModel, "BookmarksViewModel", "AndroidX ViewModel")
    Rel_D(bookmarkRoute, bookmarkScreen, "")
    Rel_U(bookmarkViewModel, bookmarkScreen, "NewsFeedUiState [StateFlow]")

    Component(youRoute, "ForYouRoute", "AndroidX Navigation")
    Component(youScreen, "ForYouScreen", "Jetpack Compose")
    Component(youViewModel, "ForYouViewModel", "AndroidX ViewModel")
    Rel_D(youRoute, youScreen, "")
    Rel_U(youViewModel, youScreen, "NewsFeedUiState [StateFlow]")

    Component(topicRoute, "TopicRoute", "AndroidX Navigation")
    Component(topicScreen, "TopicScreen", "Jetpack Compose")
    Component(topicViewModel, "TopicViewModel", "AndroidX ViewModel")
    Rel_D(topicRoute, topicScreen, "")
    Rel_U(topicViewModel, topicScreen, "TopicUiState [StateFlow]")

    Component(interestsRoute, "InterestsRoute", "AndroidX Navigation")
    Component(interestsScreen, "InterestsScreen", "Jetpack Compose")
    Component(interestsViewModel, "InterestsViewModel", "AndroidX ViewModel")

    Component(authorRoute, "AuthorRoute")
    Component(authorScreen, "AuthorScreen", "Jetpack Compose", "")
    Component(authorViewModel, "AuthorViewModel", "AndroidX ViewModel")
}

Layer(data, "Data") {
    Component(authorRepo, "OfflineFirstAuthorsRepository")
    Component(authorDAO, "AuthorDao", "AndroidX Room DAO")
    Component(remote, "RetrofitNiaNetwork", "WorkManager")
    Component(apiClient, "RetrofitNiaNetworkApi", "Retrofit")

    Component(topicRepo, "OfflineFirstTopicsRepository")
    Component(topicDAO, "TopicDao", "AndroidX Room DAO")

    Component(newsRepo, "OfflineFirstNewsRepository")
    Component(newsDAO, "NewsResourceDao", "AndroidX Room DAO")

    Component(userDataRepo, "OfflineFirstUserDataRepository")
    Component(prefsSource, "NiaPreferencesDataSource")
}

ContainerDb(prefs, "UserPreferences", "AndroidX Proto DataStore")
Cloud()
ContainerDb(db, "Database", "SQLite")

Rel_U(prefsSource, userDataRepo, "Flow<UserData>")
Rel_U(prefs, prefsSource, "Flow<UserData>")

Rel(interestsRoute, interestsScreen, "")
Rel_U(topicDAO, topicRepo, "Flow<List<TopicEntity>>")
Rel_U(topicRepo, interestsViewModel, "Flow<List<Topic>>")
Rel_U(authorRepo, interestsViewModel, "Flow<Result<Author>>")
Rel_U(interestsViewModel, interestsScreen, "InterestsUiState [StateFlow]")

Rel(authorRoute, authorScreen, "")
Rel_U(db, authorDAO, "AuthorEntities")
Rel_U(authorDAO, authorRepo, "Flow<AuthorEntity>")
Rel_U(authorRepo, authorViewModel, "Flow<Result<Author>>")
Rel_U(authorViewModel, authorScreen, "AuthorScreenUiState [StateFlow]")

Rel_U(db, newsDAO, "PopulatedNewsResources")
Rel_U(newsDAO, newsRepo, "Flow<List<NewsResource>>")
Rel_U(newsRepo, topicViewModel, "Flow<List<NewsResource>>")

Rel_U(userDataRepo, youViewModel, "Flow<UserData>")

CloudRel_U(cloud, apiClient, "Cloud Data")
CloudRel_U(apiClient, remote, "Cloud Data")
CloudRel_U(remote, authorRepo, "Cloud Data")
CloudRel_D(authorRepo, authorDAO, "Cloud Data")
CloudRel_D(authorDAO, db, "Cloud Data")

Rel(newsRepo, bookmarkViewModel, "Flow<List<NewsResource>>")

Lay_R(prefs, cloud)
Lay_R(cloud, db)
@enduml