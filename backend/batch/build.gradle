
buildscript {
	ext {
		wrapperVersion = '1.0.29.RELEASE'
	}
	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot.experimental:spring-boot-thin-gradle-plugin:${wrapperVersion}")
	}
}

plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"
	alias(libs.plugins.spring.boot)
	alias(libs.plugins.spring.dependency)
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot.experimental.thin-launcher'

group = 'io.spring.sample'
version = '2.0.0.RELEASE-lite'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

ext {
	springCloudFunctionVersion = "3.2.4"
	awsLambdaEventsVersion = "3.9.0"
	awsLambdaCoreVersion = "1.1.0"
}
ext['reactor.version'] = "3.1.7.RELEASE"

assemble.dependsOn = [shadowJar, thinJar]

jar {
	manifest {
		attributes 'Main-Class': 'example.FunctionConfiguration'
	}
}


import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer

shadowJar {
	archiveClassifier = 'gcp'
	dependencies {
		exclude(
				dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
	}
	// Required for Spring
	mergeServiceFiles()
	append 'META-INF/spring.handlers'
	append 'META-INF/spring.schemas'
	append 'META-INF/spring.tooling'
	transform(PropertiesFileTransformer) {
		paths = ['META-INF/spring.factories']
		mergeStrategy = "append"
	}
}

configurations {
	testCompile.extendsFrom(compileOnly)
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-function-dependencies:${springCloudFunctionVersion}"
	}
}

dependencies {
	implementation(project(":data"))
	implementation("org.springframework.cloud:spring-cloud-function-adapter-gcp")
	implementation("org.springframework.cloud:spring-cloud-starter-function-webflux")
	implementation("org.springframework.boot:spring-boot-configuration-processor")
	compileOnly("com.amazonaws:aws-lambda-java-events:${awsLambdaEventsVersion}")
	compileOnly("com.amazonaws:aws-lambda-java-core:${awsLambdaCoreVersion}")
	testCompile('org.springframework.boot:spring-boot-starter-test')
}
